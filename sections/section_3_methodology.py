# ‚óØ SECTION 3 ‚Äì METODOLOG√çA
# Objetivo:
#   Describir el origen del dataset, el enfoque metodol√≥gico y los par√°metros utilizados para generar las reglas de asociaci√≥n.
# Contenido:
#   - Fuente del dataset y contexto comercial
#   - Algoritmo utilizado (Apriori)
#   - Biblioteca empleada (mlxtend)
#   - Par√°metros clave del modelo: combinaci√≥n m√°xima y soporte m√≠nimo

import streamlit as st
from utils.visual_helpers import mostrar_matriz_binaria

# ‚óØ Secci√≥n 3: METODOLOGIA DE ANALISIS
# -----------------------------------------------------------------------------------------------------------------

def show_section_3_methodology(matriz_binaria):  # Funcion que muestra la secci√≥n de metodolog√≠a del an√°lisis, describiendo el origen del dataset, el enfoque metodol√≥gico y los par√°metros utilizados.
     
  # ‚óØ Tabs antes del t√≠tulo     
       
    # Formato de Tabs
    st.markdown("""
      <style>
            
      .stTabs [data-baseweb="tab-list"] {
      overflow-x: auto !important;      /* permite scroll horizontal */
      white-space: nowrap;              /* evita que se bajen de l√≠nea */
      display: flex;                    /* asegura que se alineen horizontalmente */
      flex-wrap: nowrap;                /* evita que se acomoden en m√°s de una l√≠nea */
      scrollbar-width: thin;            /* (opcional) scroll m√°s fino en Firefox */
      }

      
      /* Scrollbar para navegadores WebKit (Chrome, Edge, Safari) */
      .stTabs [data-baseweb="tab-list"]::-webkit-scrollbar {
          height: 6px;                      /* altura de la barra de scroll */
      }
      .stTabs [data-baseweb="tab-list"]::-webkit-scrollbar-thumb {
          background-color: #aaa;           /* color del "pulgar" del scroll */
          border-radius: 4px;               /* bordes redondeados para est√©tica */
      }
      
      .stTabs [data-baseweb="tab"] {
          background-color: #f0f0f0;
          padding: 8px 16px;
          border-radius: 8px 8px 0 0;
          font-weight: bold;
          color: #333333;
          border: 1px solid #ccc;
      }
      .stTabs [aria-selected="true"] {
          background-color: #ffdb99;
          box-shadow: 0px 4px 6px rgba(60, 60, 60, 0.6);
          color: black;
          font-weight: 800 !important;
          font-size: 16px !important;
          border-bottom: none;
      }
      </style>
      """, unsafe_allow_html=True)
    
    # Tabs principales
    tab1, tab2, tab3 = st.tabs([
        "üü† Modelo Aplicado",
        "üü† Preprocesamiento de Datos",
        "üü† Glosario de M√©tricas"
    ])


    with tab1:
      st.markdown("""
        ---
        ## **Algoritmo Apriori** 
        
        ### ¬øQu√© es Apriori?
        Apriori es un algoritmo de `Miner√≠a de Datos` utilizado para descubrir `Reglas de Asociaci√≥n` en grandes conjuntos de datos.  
        Se basa en el principio de que si un conjunto de productos es frecuente, entonces todos sus subconjuntos tambi√©n deben serlo.  
        Esto permite identificar combinaciones de productos que se compran juntos con frecuencia, lo que es especialmente √∫til en el sector retail.

                     
        ### ¬øPor qu√© Apriori?
        - **Eficiencia:** dise√±ado para trabajar con grandes conjuntos de datos, identificando patrones de compra comunes.
        - **Interpretabilidad:** genera reglas de asociaci√≥n f√°ciles de entender, lo que permite a los analistas y gerentes tomar decisiones informadas.
        - **Flexibilidad:** permite ajustar par√°metros como soporte y confianza para adaptarse a diferentes necesidades comerciales.

   
        ### Contexto Comercial  
        En el contexto del retail, Apriori se utiliza para analizar transacciones de ventas y descubrir patrones de compra.  
        Por ejemplo, puede identificar que los clientes que compran pan tambi√©n tienden a comprar manteca, lo que sugiere una asociaci√≥n entre estos productos.   
        Esta informaci√≥n puede ser utilizada para mejorar la disposici√≥n de los productos en tienda, ofrecer promociones cruzadas o personalizar las recomendaciones de productos a los clientes.
       
         
        ### ¬øC√≥mo se implementa?
        El algoritmo Apriori se implementa en Python utilizando la librer√≠a `mlxtend`, que proporciona una interfaz sencilla para aplicar el algoritmo a conjuntos de datos de transacciones.   
        A continuaci√≥n, se describen los pasos clave del proceso:
        1. **Carga de datos:** se cargan las transacciones de ventas en un formato adecuado para el an√°lisis.
        2. **Preprocesamiento:** se transforma el conjunto de datos en una `matriz binaria` donde cada fila representa una transacci√≥n y cada columna un producto, con valores de 1 o 0 indicando si el producto fue comprado o no.
        3. **Aplicaci√≥n del algoritmo:** se aplica el algoritmo Apriori para identificar combinaciones frecuentes de productos, utilizando los par√°metros definidos.
        4. **Generaci√≥n de reglas de asociaci√≥n:** a partir de las combinaciones frecuentes, se generan reglas de asociaci√≥n que indican la probabilidad de que un producto sea comprado dado otro producto.        
        5. **Evaluaci√≥n de reglas:** se eval√∫an las reglas generadas utilizando m√©tricas como soporte, confianza y lift para identificar las m√°s relevantes y √∫tiles para el negocio.
        
        
        ### Par√°metros del Algoritmo
        - **Maximum Combination Length:** define la longitud m√°xima de las combinaciones de productos a considerar. 
            üëâüèª En nuestro caso fijaremos este parametro en 2, con el fin de considerar unicamente pares de productos, para facilitar la interpretaciones y la toma de decisiones.
        - **Minimum Co-Occurrence Support:** establece un umbral m√≠nimo de soporte para filtrar combinaciones raras, asegurando que solo se consideren asociaciones significativas.       
            üëâüèª En nuestro caso lo definimos en 0.005 para enfocarnos en asociaciones realmente frecuentes, descartando asociaciones raras.
        - **Support:** mide la frecuencia relativa de un conjunto de productos en las transacciones, ayudando a identificar asociaciones comunes
            üëâüèª En nuestro caso es definido en ‚â• 0.01, asegurando que las reglas identificadas aparezcan en al menos el 1% de todas las transacciones, garantizando relevancia.
        - **Confidence:** indica la probabilidad de que un producto sea comprado dado otro producto, lo que ayuda a evaluar la fuerza de la asociaci√≥n.
            üëâüèª En nuestro caso lo fijamos en ‚â• 0.2, asegurando que las reglas sugeridas tengan una probabilidad razonable de repetirse en nuevas ventas.
        - **Lift:** mide la intensidad de la relaci√≥n entre dos productos, comparando la probabilidad de que se compren juntos con la probabilidad de que se compren independientemente.
            üëâüèª En nuestro caso lo fijamos en ‚â• 2, asegurando que las asociaciones detectadas sean m√°s fuertes que las esperadas por azar, lo que indica una relaci√≥n significativa entre los productos.
        - **Leverage:** mide la diferencia entre la probabilidad de que dos productos se compren juntos y la probabilidad de que se compren independientemente, ayudando a identificar asociaciones significativas.    
     
             
        ### Ejemplo de Regla de Asociaci√≥n
        A continuaci√≥n, se muestra un ejemplo de una regla de asociaci√≥n generada por el algoritmo Apriori:
        - **Regla:** Si un cliente compra `Pan`, entonces es probable que tambi√©n compre `Manteca`.
        - **Soporte:** 0.05 (5% de las transacciones contienen ambos productos)
        - **Confianza:** 0.8 (80% de las transacciones que contienen Pan tambi√©n contienen Manteca)
        - **Lift:** 2.5 (la probabilidad de comprar Manteca es 2.5 veces mayor cuando se compra Pan)
        - **Interpretaci√≥n:** Esta regla sugiere que los clientes que compran Pan tienen una alta probabilidad de comprar Manteca, lo que puede ser utilizado para mejorar la disposici√≥n de los productos en tienda o para ofrecer promociones cruzadas.

      
          
        ### Resultados esperados
        - **Identificaci√≥n de patrones de compra:** se espera descubrir combinaciones de productos que los clientes compran juntos con frecuencia, lo que permite a la empresa optimizar su estrategia de ventas.
        - **Mejora de la experiencia del cliente:** al entender qu√© productos se compran juntos, la empresa puede ofrecer recomendaciones personalizadas y mejorar la disposici√≥n de los productos en tienda.
        - **Oportunidades de ventas cruzadas:** se espera identificar oportunidades para aumentar las ventas mediante la promoci√≥n de `Productos Complementarios`, lo que puede mejorar la rentabilidad y la satisfacci√≥n del cliente.

            
        ### Conclusi√≥n
        El algoritmo Apriori es una herramienta poderosa para descubrir patrones de compra en retail, permitiendo a las empresas identificar oportunidades de ventas cruzadas y mejorar la experiencia del cliente.  
        Su capacidad para generar reglas de asociaci√≥n claras y significativas lo convierte en una opci√≥n ideal para el an√°lisis de datos de ventas.

        ---

      """)

      st.markdown(""" 
        ### Reglas Seleccionadas
        
        Las reglas de asociaci√≥n se filtraron y priorizaron de la siguiente manera:
        * Se eliminaron reglas duplicadas o reflejadas (A‚ÜíB y B‚ÜíA).  
        * Se priorizaron reglas con:   
          - Productos de alta frecuencia de compra   
          - Interpretaci√≥n clara para el negocio  
        * Se destacaron combinaciones con potencial de **cross-selling** o **agrupamiento f√≠sico** en tienda.
      """)

    
    with tab2:
      st.markdown("---")    
      st.markdown("""
        ## Procesamiento de los Datos
        Para asegurar la calidad del an√°lisis, se realizaron los siguientes pasos de depuraci√≥n:

        ### Filtrado de transacciones:
          - Se consideraron solo ventas realizadas a clientes del Reino Unido, por consistencia geogr√°fica.  
          - Se eliminaron devoluciones (c√≥digos de factura con `'C'`) y filas con `Quantity <= 0` o `UnitPrice <= 0`.  
          - Se excluyeron productos sin descripci√≥n o con c√≥digos gen√©ricos irrelevantes.  

        ### Tratamiento de valores nulos:
          - Se eliminaron filas con `CustomerID` faltante.  

        ### Estandarizaci√≥n de texto:
          - Se unificaron descripciones a min√∫sculas y se corrigieron errores comunes para mejorar la agrupaci√≥n de productos.  

        ### Generaci√≥n de matriz binaria:
          - Para poder aplicar el algorithmo fue necesario crear una matriz de `Factura x Producto`.
          - Luego del procesamiento, la estructura de la matriz es la siguiente:  
              * cada Fila representa una Transacci√≥n  
              * cada Columna representa Producto.  
              * El valor `1` indica que ese producto `fue comprado` en esa transacci√≥n.  
    
        Veamos mas abajo, la matriz binaria enfocandonos, por ejemplo, en los 10 productos m√°s frecuentes  
        """)
      mostrar_matriz_binaria(matriz_binaria, top_n=10)  # Mostrar un fragmento de la matriz binaria filtrada




    with tab3:    # SECTION 8 ‚Äì GLOSARIO DE M√âTRICAS
                  # Objetivo:
                  #   Proporcionar definiciones claras y f√≥rmulas clave de las m√©tricas utilizadas en el an√°lisis de reglas de asociaci√≥n.
                  # Contenido:
                  #   - Definiciones de Support, Confidence, Lift, Leverage y Conviction
                  #   - Ejemplos de f√≥rmulas aplicadas
                  #   - Explicaciones orientadas a usuarios de negocio no t√©cnicos
           
      st.subheader("üìè Glosario de M√©tricas")

      st.markdown("""
      **:orange[Support]**  
      The proportion of transactions that contain a specific itemset. High support values indicate that the itemset is frequently purchased together.

      - *Item Support:*  
      `Support(A) = Transactions containing A / Total number of transactions`

      - *Co-occurrence Support:*  
      `Support(A ‚à™ B) = Transactions containing both A and B / Total number of transactions`


      **:orange[Confidence]**    
      The conditional probability that a transaction containing item A will also contain item B.

      - `Confidence(A ‚Üí B) = Support(A ‚à™ B) / Support(A) √ó 100%`  
      - `Confidence(B ‚Üí A) = Support(A ‚à™ B) / Support(B) √ó 100%`


      **:orange[Lift]**  
      Indicates how much more likely item B is purchased when item A is purchased, compared to when item B is purchased independently.

      - `Lift(A ‚Üí B) = Support(A ‚à™ B) / (Support(A) √ó Support(B))`


      **:orange[Leverage]**  
      Measures how much more often A and B occur together than expected if they were independent.

      - `Leverage(A ‚Üí B) = Support(A ‚à™ B) ‚àí (Support(A) √ó Support(B))`


      **:orange[Conviction]**  
      Indicates the strength of implication in the rule. High values (>1) suggest stronger dependency.

      - `Conviction(A ‚Üí B) = (1 ‚àí Support(B)) / (1 ‚àí Confidence(A ‚Üí B))`  
      - `Conviction(B ‚Üí A) = (1 ‚àí Support(A)) / (1 ‚àí Confidence(B ‚Üí A))`
      """)
      
      
