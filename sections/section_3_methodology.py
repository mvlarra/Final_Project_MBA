# ‚óØ SECTION 3 ‚Äì METODOLOG√çA
# Objetivo:
#   Describir el origen del dataset, el enfoque metodol√≥gico y los par√°metros utilizados para generar las reglas de asociaci√≥n.
# Contenido:
#   - Fuente del dataset y contexto comercial
#   - Algoritmo utilizado (Apriori)
#   - Biblioteca empleada (mlxtend)
#   - Par√°metros clave del modelo: combinaci√≥n m√°xima y soporte m√≠nimo

import streamlit as st

# ‚óØ Secci√≥n 3: METODOLOGIA DE ANALISIS
# -----------------------------------------------------------------------------------------------------------------

def show_section_3_methodology():  # Funcion que muestra la secci√≥n de metodolog√≠a del an√°lisis, describiendo el origen del dataset, el enfoque metodol√≥gico y los par√°metros utilizados.
    st.title("üß™ Metodolog√≠a")

    tab2, tab3 =  st.tabs([
        "üß™ Versi√≥n enriquecida (detallada)",
        "üìÑ Versi√≥n t√©cnica (para README)",
    ])

    with tab2:
        st.markdown("""
        ## üß™ Metodolog√≠a Detallada

        Este proyecto aplica **Market Basket Analysis** (An√°lisis de Canasta de Compras) utilizando datos reales del dataset **Online Retail II**, que contiene m√°s de **500.000 transacciones** de una tienda online del Reino Unido.

        ---

        ### üìÅ 1. Limpieza y Preparaci√≥n de Datos

        üîç Para asegurar la calidad del an√°lisis, se realizaron los siguientes pasos de depuraci√≥n:

        ‚úÖ **Filtrado de transacciones**  
        - Se consideraron solo ventas realizadas a clientes del Reino Unido, por consistencia geogr√°fica.  
        - Se eliminaron devoluciones (c√≥digos de factura con `'C'`) y filas con `Quantity <= 0` o `UnitPrice <= 0`.  
        - Se excluyeron productos sin descripci√≥n o con c√≥digos gen√©ricos irrelevantes.  

        ‚úÖ **Tratamiento de valores nulos**  
        - Se eliminaron filas con `CustomerID` faltante.  

        ‚úÖ **Estandarizaci√≥n de texto**  
        - Se unificaron descripciones a min√∫sculas y se corrigieron errores comunes para mejorar la agrupaci√≥n de productos.  

        ‚úÖ **Generaci√≥n de matriz binaria**  
        - Se cre√≥ una matriz **Factura x Producto** con valores `1` si un producto fue comprado en esa transacci√≥n.

        ---

        ### üìà 2. Algoritmo de Reglas de Asociaci√≥n

        Para detectar productos que se compran juntos frecuentemente se aplic√≥ el algoritmo **Apriori**, implementado con la librer√≠a `mlxtend`, una biblioteca confiable de Python especializada en extensiones de aprendizaje autom√°tico.

        üß™ **Algoritmo seleccionado: Apriori**  
        - **Justificaci√≥n:** f√°cil interpretaci√≥n, buen desempe√±o en datasets peque√±os y medianos, ideal para an√°lisis exploratorio.  
        - Altamente efectivo para identificar *frequent itemsets* (conjuntos de √≠tems frecuentes) y derivar reglas de asociaci√≥n, bas√°ndose en m√©tricas predefinidas como el **support** y la **confidence**.

        ---

        ### ‚öôÔ∏è Par√°metros utilizados en Apriori

        | Par√°metro                     | Descripci√≥n                                              | Valor         | ¬øEsto asegura que...?                                                                 |
        |------------------------------|----------------------------------------------------------|---------------|----------------------------------------------------------------------------------------|
        | Maximum Combination Length   | Longitud m√°xima de combinaci√≥n de √≠tems                  | 2             | Solo se consideren pares de productos, facilitando interpretaciones y decisiones.     |
        | Minimum Co-Occurrence Support| Umbral m√≠nimo de soporte de coocurrencia                 | 0.005 (0.5%)  | Se filtren combinaciones raras, enfoc√°ndose en asociaciones realmente frecuentes.     |
        | Support                      | Frecuencia relativa de un itemset                        | ‚â• 0.01        | Las reglas identificadas aparezcan en al menos el 1% de todas las transacciones.      |
        | Confidence                   | Probabilidad de co-ocurrencia dado un antecedente       | ‚â• 0.2         | Las reglas sugeridas tengan una probabilidad razonable de repetirse en nuevas ventas. |
        | Lift                         | Intensidad de la relaci√≥n entre dos productos            | ‚â• 2           | Las asociaciones detectadas sean m√°s fuertes que las esperadas por azar.             |

        üìå Tambi√©n se calcul√≥ **Conviction**, aunque no se prioriz√≥ en la visualizaci√≥n.

        ---

        ### üßπ 3. Filtrado de Reglas

        üîÅ Se eliminaron reglas duplicadas o reflejadas (A‚ÜíB y B‚ÜíA).  
        üìä Se priorizaron reglas con:   
            - Productos de alta frecuencia de compra   
            - Interpretaci√≥n clara para el negocio  
        üß∫ Se destacaron combinaciones con potencial de **cross-selling** o **agrupamiento f√≠sico** en tienda.

        ---

        ### üìà 4. Visualizaci√≥n y Exploraci√≥n

        Las reglas y resultados se presentan mediante:

        - üìä Tablas ordenadas por m√©tricas clave  
        - üß† Interpretaciones autom√°ticas por producto  
        - üîó Redes de co-ocurrencia  
        - üßØ Heatmap cruzado entre productos  

        > Todo se organiza en una interfaz amigable para el an√°lisis por parte del usuario final.
        """)

    with tab3:
        st.markdown("""
        ## üß™ Methodology (README Style)

        This project applies Market Basket Analysis using real-world transaction data from the [Online Retail II dataset](https://www.kaggle.com/datasets/mashlyn/online-retail-ii-uci), which contains over 500,000 purchases from a UK-based e-commerce wholesaler.

        ### 1. Data Cleaning & Preparation

        - Filtered only **transactions from the United Kingdom**.
        - Removed:
          - Cancellations (InvoiceNo starting with 'C')
          - Negative quantities or unit prices
          - Rows with missing `CustomerID` or empty `Description`
        - Standardized product descriptions (lowercase, trimming, typo cleaning)
        - Built a **binary basket matrix** (`Invoice x Product`) for algorithm input

        ### 2. Algorithm & Implementation

        - Used **Apriori algorithm** (`mlxtend` library)
        - Parameters:
          - `min_support`: 0.01
          - `min_confidence`: 0.2
          - `lift threshold`: 2.0
        - All itemsets and rules were filtered based on their business value and clarity.

        ### 3. Metrics Used

        | Metric      | Meaning                                                |
        |-------------|--------------------------------------------------------|
        | `Support`   | Frequency of co-occurrence in the dataset              |
        | `Confidence`| Likelihood of product B being purchased given A        |
        | `Lift`      | Strength of association compared to random occurrence |

        Other metrics (e.g., `Conviction`, `Leverage`) were computed but not prioritized in the main interface.

        ### 4. Business Logic

        Rules were filtered and ranked by:
        - Relevance to high-frequency products
        - Interpretability and usefulness for **cross-selling**
        - Elimination of mirrored or redundant rules

        ### 5. Visualization Strategy

        The app presents insights via:
        - Rule tables with interactive filtering
        - Association graphs (network of co-occurrences)
        - Cross-product heatmaps
        - Contextual recommendations based on real baskets
        """)