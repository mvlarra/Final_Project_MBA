# ‚óØ SECTION 7 ‚Äì ACCIONES ESTRAT√âGICAS PARA TU NEGOCIO
# Objetivo:
#   Traducir hallazgos anal√≠ticos en acciones pr√°cticas que generen impacto comercial.
# Contenido:
#   - Sugerencias accionables como bundles, descuentos o reubicaciones
#   - Asociaci√≥n entre reglas y productos clave
#   - Priorizaci√≥n personalizada de acciones por parte del usuario
#   - Exportaci√≥n de las acciones seleccionadas

import streamlit as st
import pandas as pd


# 7. ‚óØ Secci√≥n: ACCIONES ESTRAT√âGICAS PARA TU NEGOCIO
# ............................................................................................

def show_section_7_actions(rules, Top_10_Mas_Vendidos):
    """
    Muestra la secci√≥n de acciones estrat√©gicas basadas en las reglas de asociaci√≥n generadas.
    Permite al usuario seleccionar acciones sugeridas para mejorar la estrategia comercial.
    :param rules: DataFrame con las reglas de asociaci√≥n generadas.
    :param Top_10_Mas_Vendidos: DataFrame con el top 10 de productos m√°s vendidos.
    """

    st.title("üíº Acciones estrat√©gicas para tu negocio")

    st.markdown("""
    Basado en los patrones encontrados en los datos, estas son **acciones sugeridas** orientadas a generar impacto real en las ventas.  
    Cada acci√≥n est√° relacionada con productos clave del an√°lisis y pod√©s marcar su prioridad de implementaci√≥n.

    ‚úÖ El objetivo es **convertir los hallazgos en oportunidades de mejora**, aplicando estrategias como bundles, descuentos o reubicaci√≥n de productos para **incrementar los ingresos, optimizar la rotaci√≥n, potenciar la estrategia comercial y mejorar la experiencia de compra**.
    """)

    # ‚óØ Asegurar que antecedents y consequents est√©n en formato lista
    rules['antecedents'] = rules['antecedents'].apply(lambda x: [x] if isinstance(x, str) else x)
    rules['consequents'] = rules['consequents'].apply(lambda x: [x] if isinstance(x, str) else x)

    # ‚óØ Construir DataFrame con acciones, productos y l√≥gica
    acciones = [
        {
            "Acci√≥n": "üì¶ Crear bundles con productos frecuentemente comprados juntos",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                [f"{', '.join(r['antecedents'])} + {', '.join(r['consequents'])}" 
                    for _, r in rules.sort_values(by='lift', ascending=False).head(3).iterrows()]
            ),
            "L√≥gica utilizada": "Top 3 reglas con mayor lift"
        },
        {
            "Acci√≥n": "üõí Ofrecer descuentos por comprar productos complementarios",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                [f"{', '.join(r['antecedents'])} ‚Üí {', '.join(r['consequents'])}"
                    for _, r in rules[rules['confidence'] > 0.7].head(3).iterrows()]
            ),
            "L√≥gica utilizada": "Reglas con confidence > 0.7"
        },
        {
            "Acci√≥n": "üè∑Ô∏è Redise√±ar la disposici√≥n de los productos en tienda o web",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                rules['antecedents'].explode().value_counts().head(3).index.tolist()
            ),
            "L√≥gica utilizada": "Productos que aparecen con m√°s frecuencia como antecedente"
        },
        {
            "Acci√≥n": "üìà Monitorear la rotaci√≥n de los productos m√°s vendidos",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                Top_10_Mas_Vendidos['Producto'].head(3).tolist()
            ),
            "L√≥gica utilizada": "Top 10 productos m√°s vendidos"
        },
        {
            "Acci√≥n": "üéØ Usar recomendaciones en tiempo real en el checkout",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                [f"{', '.join(r['antecedents'])} ‚Üí {', '.join(r['consequents'])}"
                    for _, r in rules[(rules['confidence'] > 0.6) & (rules['support'] > 0.05)].head(3).iterrows()]
            ),
            "L√≥gica utilizada": "Reglas con confidence > 0.6 y support > 0.05"
        },
        {
            "Acci√≥n": "üîç Identificar productos con baja venta pero alta conexi√≥n (lift)",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                [f"{', '.join(r['antecedents'])} ‚Üí {', '.join(r['consequents'])}"
                    for _, r in rules[(rules['support'] < 0.05) & (rules['lift'] > 3)].head(3).iterrows()]
            ),
            "L√≥gica utilizada": "Reglas con support bajo y lift alto"
        },
        {
            "Acci√≥n": "üìä Generar reportes peri√≥dicos para seguir tendencias de compra",
            "Productos sugeridos": "-",
            "L√≥gica utilizada": "No aplica: acci√≥n operativa"
        },
        {
            "Acci√≥n": "üí¨ Capacitar al equipo de ventas en productos m√°s conectados",
            "Productos sugeridos": "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(
                rules['antecedents'].explode().value_counts().head(3).index.tolist()
            ),
            "L√≥gica utilizada": "Productos que m√°s veces aparecen en reglas"
        }
    ]

    df_acciones = pd.DataFrame(acciones)

    # ‚óØ Capturar interacci√≥n del usuario
    resultados_finales = []
    for i, fila in df_acciones.iterrows():
        st.markdown("---")  # Separador visual simple

        col1, col2 = st.columns([0.75, 0.25])
        with col1:
            check = st.checkbox(fila["Acci√≥n"], key=f"check_{i}")
        with col2:
            prioridad = st.selectbox("Prioridad", ["Alta", "Media", "Baja"], key=f"prio_{i}")

        st.markdown(f"""
        <div style='font-size: 0.85em; color: gray; line-height: 1.3;'>
            <b>Productos sugeridos:</b><br>{fila['Productos sugeridos']}<br>
            <b>L√≥gica:</b> {fila['L√≥gica utilizada']}
        </div>
        """, unsafe_allow_html=True)

        resultados_finales.append({
            "Acci√≥n": fila["Acci√≥n"],
            "Prioridad": prioridad,
            "Marcado": check,
            "Productos sugeridos": fila["Productos sugeridos"].replace("<br>‚Ä¢ ", " - ").replace("<br>", " "),
            "L√≥gica utilizada": fila["L√≥gica utilizada"]
        })

    # ‚óØ Mostrar resumen de acciones marcadas
    st.markdown("### üßæ Acciones seleccionadas")
    resumen_df = pd.DataFrame(resultados_finales)
    seleccionadas = resumen_df[resumen_df["Marcado"] == True]

    if not seleccionadas.empty:
        st.dataframe(seleccionadas.drop(columns=["Marcado"]), use_container_width=True)

        # ‚óØ Bot√≥n para exportar CSV
        csv = seleccionadas.drop(columns=["Marcado"]).to_csv(index=False).encode('utf-8')
        st.download_button("‚¨áÔ∏è Descargar recomendaciones seleccionadas", data=csv,
                            file_name="acciones_recomendadas.csv", mime="text/csv")
    else:
        st.info("Seleccion√° al menos una acci√≥n para ver el resumen o exportarlo.")